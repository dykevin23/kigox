// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  avatar    String?
  provider  String
  Child     Child[]
  Profile   Profile[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Profile {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  nickname      String   @unique
  birthday      String
  gender        String
  mobile        String?
  zonecode      String
  address       String
  detailAddress String
  latitude      Float?
  longitude     Float?
  incomeRange   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Child {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  nickname  String
  birthday  String
  gender    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
  Buy       Buy[]
  Search    Search[]
}

model StandardData {
  id           Int     @id @default(autoincrement())
  key          String
  standardType String
  min          String?
  max          String?
  value        String?
  unit         String?
  score        Int
  weight       Float?
}

model Product {
  id             Int      @id @default(autoincrement())
  title          String
  mainCategory   String
  middleCategory String
  price          String
  tradeMethod    String
  tradeRegion    String
  recommedAge    String
  gender         String
  description    String   @db.MediumText
  status         String
  child          Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId        Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Buy            Buy[]
  File           File[]
}

model MainCategory {
  id             Int              @id @default(autoincrement())
  category       String           @unique
  name           String
  isUse          Boolean
  MiddleCategory MiddleCategory[]
}

model MiddleCategory {
  id             Int          @id @default(autoincrement())
  category       String       @unique
  name           String
  mainCategory   MainCategory @relation(fields: [mainCategoryId], references: [id], onDelete: Cascade)
  mainCategoryId Int
  isUse          Boolean
}

model Buy {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  child     Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId   Int
  boughtAt  DateTime @default(now())
}

model File {
  id        Int     @id @default(autoincrement())
  filePath  String
  type      String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Search {
  id        Int      @id @default(autoincrement())
  keyword   String   @db.MediumText
  child     Child    @relation(fields: [childId], references: [id], onDelete: Cascade)
  childId   Int
  createdAt DateTime @default(now())
}
